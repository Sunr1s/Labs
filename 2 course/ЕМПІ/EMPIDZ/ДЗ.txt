 
Отримано аналіз програмних застосунків конкурентів. Створивши таблицю порівняли їх плюси та мінуси , визначили необхідні функіональні вимоги. Вимоги до конфеденційності та безпеки. Визначили можливі проблеми та вразливості ринку для вирішення та привести нововедення у ринок IT послуг. Також отпримаємо деякий список вимог до розробки , та можливо уникнимо допрацювання ПЗ, виконавши повне ТЗ одразу.


Наразі, технологія блокчейну зазнала серьойзну проблему з розмім и вагою, не кожен користувач наважеться завантажуватим програму, з настільки великою вагою. Тому наш проект з розвиненую інфраструктурою обміну , додаток для переказів «вільних» коштів. НА відміну від звчиних фіатних тарнзакцій , ніяка структура чи компанія не вплине на неї (відміна , блокування). Ми даруємо вам зручний інструмент , що дозволяє створювати перекази 24/7 , без вихідних.


У цій лабораторній роботі ми ознайомилися із процесами встановлення призначення системи. Провели аналіз предметної галузі та визначили функції системи. Зробили інтерв’ю з actors системи – користувачем сервісу та директором (CEO, фінансистом, власником тощо). Сформулювали функціональні вимоги, які випливають з проведених інтерв’ю. Виконали роботу з визначення функціональних вимог власного проекту. Провели декомпозицію вимог, а також графічно представили її за допомогою відповідних діаграм. Визначили деякі системні вимоги.



Тема моєї гри це доганлки де кіт рухається, з меньшою швидкостью від миші. Задача миші, навздоганяти їжу. Гра закінчується , якщо кіт дожене мишу, програеться звук програшу. Якщо ж миша буде успішно тікати, програється звук успіху, якщо миша наздожене їжу, програеться звук харчування.Також було проведено моделювання за допомогою мови моделювання BPMN, у вигляді діаграми.


У цій лабораторній роботі я здобув навички у створенні специфікації функціональних вимог до програмного забезпечення на основі шаблону Software Requirements Specification, стандарт IEEE 830 методології розробки (RUP) та відповідного формату представлення специфікації вимог. Досліджено процес створення документу опису первиних вимог до програмного забезпечення та набуто практичні навичи у виділення та документування вимог. Виділенно функціональні та нефункціональні вимоги до програмного забезпечення.



У цій лабораторній роботі я здобув навички у постановки завдання. Створенні документа «Ескізний проект», що містить:
11.1.	Вибір методу рішення і мови програмування;
11.2.	Специфікації процесів;
11.3.	Всі отримані діаграми;
11.4.	Словник термінів.
Навчився надати визначення аналізу та пояснити його призначення. Методи та засоби аналізу. Особливості застосування методів аналізу. Існуючі методи збору та виявлення вимог.Призначення діаграми прецедентів.


У цій лабораторній роботі я вивчив особливості застосування технологій IDEF0 та IDEF3. Обрав варіант використання системи, що аналізується, і провів аналіз бізнес-процесів, використовуючи технологію IDEF0. Побудував контекстну діаграму та дочірню діаграму 1-го рівня в нотації IDEF0, здійснив їх текстовий опис. Обрав один із функціональних блоків діаграми IDEF0 та побудував діаграму декомпозиції цього блоку в нотації IDEF3,та навів її текстовий опис.



Тестування вимог дозволяє зменшити кількість допрацювань і змін. Перед початком тестування вимог необхідними є наступні умови: вимоги проаналізовані й задокументовані, тобто є щось, з чим можемо працювати. Аналітик, як роль, самостійно проводить певну оцінку та перевірку цих вимог. Під час тестування вимог відбувається наступний процес: всі зацікавлені особи підтверджують, що вимоги коректні, зрозумілі і достатні для того, щоб розпочинати роботу. А користувачі підтверджують, що вимоги відображають їхні потреби в роботі. Основним критерієм готовності вимог є те, чи містять вимоги достатньо інформації для того, щоб розпочинати розробку. І важливо відзначити, що і замовник, і користувачі, і проектна команда, якою планується робота над проектом, — всі беруть участь у тестуванні вимог і враховують різні пов’язані з тестуванням вимог аспекти.
У цій лабораторній були здобуті навички з перевірки документації, створеної у лабораторній роботі 1.4, за допомогою checklist. Здійснено аналіз поведінки системи за допомогою достатнього покриття системи тест-кейсами та юз-кейсами, як з позитивними так і з негативними сценаріями.



Тестова звітність і метрики тестування - це головні QA-кі інструменти для підвищення візібіліті. При грамотному підході про роботу тестувальника знають, допомагають і QA впливає на процес в цілому. Завдання цього набору метрик оцінити наскільки якісно тестувальники виконують свої завдання, визначити рівень компетенцій і зрілості команди QA. Володіючи таким набором показників можна порівнювати команду з нею ж самою у різні моменти часу або з іншими, зовнішніми групами тестування.
Метрики важливі на усьому циклі розробки програмного забезпечення. Проте потрібно аналізувати аспект ефективності застосування кожної метрики з точки зору, на якому етапі розробки проекту від отриманої інформації ми отримаємо максимальний результат.
Отже у цій лабораторній роботі я здобув навички з дослідження особливості підрахунку значень метрик, орієнтованих на вимоги. Визначеня значення метрик, орієнтованих на вимоги, за наведеними формулами. Побудови матриці відповідності функціональних вимог до програмного продукту і підготованих тестових сценаріїв.


У лабораторній роботі було створено новий проект у програмному засобі керування та відстеження вимог. Створено нові типи вимог (функціональні, нефункціональні) та визначено для них атрибути.  Створено новий документ і додати до нього функціональні та нефункціональні вимоги. Створено перегляд вимог. Здійснено додавання нових, редагування та видалення існуючих вимог, налаштування їх атрибутів. Проведено фільтрацію вимог за пріоритетами та підраховано кількість вимог у проекті, що мають високий та середній пріоритет.



